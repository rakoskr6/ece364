#! /usr/bin/env python3.4
#
#########################
#      $Author: ee364f03 $
#      $Date: 2015-12-05 20:08:11 -0500 (Sat, 05 Dec 2015) $
#      $HeadURL: svn+ssh://ece364sv@ecegrid-thin1/home/ecegrid/a/ece364sv/svn/F15/students/ee364f03/Lab11/HomographyApp.py $
#      $Revision: 83639 $
#
#########################


import sys
import re
import random
from PySide.QtGui import *
from PySide.QtCore import *

from HomographyGUI import *
from enum import Enum

class State(Enum):
    initial = 0
    loaded = 1
    selection = 2
    ready = 3
    transformed = 4


class EntryApplication(QMainWindow, Ui_MainWindow):

    def __init__(self, parent=None):

        super(EntryApplication, self).__init__(parent)
        self.setupUi(self)

        self.btnLoadSource.clicked.connect(self.loadSource)
        self.btnLoadTarget.clicked.connect(self.loadTarget)
        #self.viewSourceImage.
        #self.viewTargetImage.
        self.btnAcquirePoints.clicked.connect(self.acquirePoints)

        self.btnTransform.clicked.connect(self.transform)
        self.btnReset.clicked.connect(self.reset)
        self.btnSave.clicked.connect(self.save)

        #self.txtAddress.textChanged.connect(self.dataEntered)
        self.state = State.initial

        self.loadedSource = False
        self.loadedTarget = False
        self.reloadTarget = False
        self.newLoad = False

        #self.viewSourceImage.mousePressEvent.connect(self.sourcePress)

        self.pixmapitem.mousePressEvent = self.my_mousepress_fn



    def loadSource(self):
        self.loadedSource = self.load(self.viewSourceImage)
        self.updateState()

    def loadTarget(self):
        if self.loadedTarget == True:
            self.reloadTarget = True
        self.loadedTarget = self.load(self.viewTargetImage)
        self.updateState()

    def load(self,view):
        #Obtain a file name from a file dialog, and pass it on to the loading method. This is to facilitate automated
        #testing. Invoke this method when clicking on the 'load' button.

        filePath, _ = QFileDialog.getOpenFileName(self, caption='Open image file ...', filter="PNG files (*.png)")

        if not filePath:
            return False

        self.newLoad = True



        scene = QtGui.QGraphicsScene()
        pic = QtGui.QPixmap(filePath)
        QGraphicsPixmapItem.mousePressEvent()
        maxSize = QtCore.QSize(pic.width(),pic.height())
        maxSize.scale(248,248,Qt.KeepAspectRatio)
        pic = pic.scaled(maxSize.width(),maxSize.height(),aspectRatioMode=Qt.IgnoreAspectRatio)
        scene.addItem(QtGui.QGraphicsPixmapItem(pic))
        view.setScene(scene)
        view.setRenderHint(QtGui.QPainter.Antialiasing)
        view.show()

        return True



    def acquirePoints(self,point=None):
        self.updateState()
        if self.state == State.selection and point != None:
            print(point)
            if self.pointUL.text() == '':
                self.pointUL.setText(str(point))
            elif self.pointUR.text() == '':
                self.pointUR.setText(str(point))
            elif self.pointLL.text() == '':
                self.pointLL.setText(str(point))
            elif self.pointLR.text() == '':
                self.pointLR.setText(str(point))

    def transform(self):
        if self.state == State.ready:
            self.state = State.transformed
        #apply homography
        self.updateState()

    def reset(self):
        if self.state == State.transformed:
            self.state = State.ready
            #return target image to pre-transformed state
        self.updateState()

    def save(self):
        pass
        #save target to file

    def updateState(self):
        #from initial to loaded
        if self.loadedTarget and self.loadedSource and self.state == State.initial:
            self.state = State.loaded

        #from loaded to selection
        elif self.state == State.loaded and self.btnAcquirePoints.isChecked():
            self.state = State.selection

        #from selection to ready
        elif self.state == State.selection and self.pointUL.text() != '' and self.pointUR.text() != '' and self.pointLL.text() != '' and self.pointLR.text() != '' and not self.btnAcquirePoints.isChecked():
                self.state = State.ready

        #from selection to loaded
        elif self.state == State.selection and not self.btnAcquirePoints.isChecked():
            self.state = State.loaded

        #from ready to loaded
        elif self.state == State.ready and self.reloadTarget == True:
            self.state = State.loaded

        #from ready to selection
        elif self.state == State.ready and self.btnAcquirePoints.isChecked():
            self.state = State.selection

        #from ready to transform (part of transform button)


        #from transformed to loaded
        elif self.state == State.transformed and self.newLoad == True:
            self.state = State.loaded

        #from transformed to ready (part of reset)


        self.stateLogic()
        print(self.state)

    def stateLogic(self):
        self.newLoad = False
        self.reloadTarget = False
        if self.state == State.initial:
            self.btnLoadSource.setEnabled(True)
            self.btnLoadTarget.setEnabled(True)
            self.btnAcquirePoints.setEnabled(False)
            self.pointUL.setEnabled(False)
            self.pointUR.setEnabled(False)
            self.pointLL.setEnabled(False)
            self.pointLR.setEnabled(False)
            self.comboEffect.setEnabled(False)
            self.btnTransform.setEnabled(False)
            self.btnReset.setEnabled(False)
            self.btnSave.setEnabled(False)
            self.pointUL.setText('')
            self.pointUR.setText('')
            self.pointLL.setText('')
            self.pointLR.setText('')


        elif self.state == State.loaded:
            self.btnLoadSource.setEnabled(True)
            self.btnLoadTarget.setEnabled(True)
            self.btnAcquirePoints.setEnabled(True)
            self.pointUL.setEnabled(True)
            self.pointUR.setEnabled(True)
            self.pointLL.setEnabled(True)
            self.pointLR.setEnabled(True)
            self.btnTransform.setEnabled(False)
            self.btnReset.setEnabled(False)
            self.btnSave.setEnabled(False)
            self.comboEffect.setEnabled(False)
            self.pointUL.setText('')
            self.pointUR.setText('')
            self.pointLL.setText('')
            self.pointLR.setText('')

        elif self.state == State.selection:
            self.btnLoadSource.setEnabled(True)
            self.btnLoadTarget.setEnabled(True)
            self.btnAcquirePoints.setEnabled(True)
            self.pointUL.setEnabled(True)
            self.pointUR.setEnabled(True)
            self.pointLL.setEnabled(True)
            self.pointLR.setEnabled(True)
            self.btnTransform.setEnabled(False)
            self.btnReset.setEnabled(False)
            self.btnSave.setEnabled(False)
            self.comboEffect.setEnabled(False)
            #self.pointUL.setText('')
            #self.pointUR.setText('')
            #self.pointLL.setText('')
            #self.pointLR.setText('')

        elif self.state == State.ready:
            self.btnLoadSource.setEnabled(True)
            self.btnLoadTarget.setEnabled(True)
            self.btnAcquirePoints.setEnabled(True)
            self.pointUL.setEnabled(True)
            self.pointUR.setEnabled(True)
            self.pointLL.setEnabled(True)
            self.pointLR.setEnabled(True)
            self.btnTransform.setEnabled(True)
            self.btnReset.setEnabled(True)
            self.btnSave.setEnabled(True)
            self.comboEffect.setEnabled(True)
            #self.pointUL.setText('')
            #self.pointUR.setText('')
            #self.pointLL.setText('')
            #self.pointLR.setText('')

        elif self.state == State.transformed:
            self.btnLoadSource.setEnabled(True)
            self.btnLoadTarget.setEnabled(True)
            self.btnAcquirePoints.setEnabled(False)
            self.pointUL.setEnabled(False)
            self.pointUR.setEnabled(False)
            self.pointLL.setEnabled(False)
            self.pointLR.setEnabled(False)
            self.btnTransform.setEnabled(True)
            self.btnReset.setEnabled(True)
            self.btnSave.setEnabled(True)
            self.comboEffect.setEnabled(True)
            #self.pointUL.setText('')
            #self.pointUR.setText('')
            #self.pointLL.setText('')
            #self.pointLR.setText('')


    def keyPressEvent(self, e):
        if e.key() == QtCore.Qt.Key_Escape:
            self.close()
        if e.key() == QtCore.Qt.Key_Backspace:
            if self.pointLR.text() != '':
                self.pointLR.setText('')
            elif self.pointLL.text() != '':
                self.pointLL.setText('')
            elif self.pointUR.text() != '':
                self.pointUR.setText('')
            elif self.pointUL.text() != '':
                self.pointUL.setText('')

    def targetPress(self):
        print(self.cursor())
        print('mouse')

    def mouseReleaseEvent(self, ev):
        num1 = round(random.random() * 100,1)
        num2 = round(random.random() * 100,1)

        self.acquirePoints(point=str(num1) + ', ' + str(num2))


    #def mousePressEvent(self, QMouseEvent):
        #print(QMouseEvent.pos())

    #def mouseReleaseEvent(self, QMouseEvent):
        #cursor =QtGui.QCursor()
        #print(cursor.pos())


    #def clear(self):
    #    self.txtAddress.clear()
    #    self.btnLoad.setEnabled(True)
    #    self.btnSave.setEnabled(False)
    #    self.lblError.setText("")


    #def validate(self):
    #    first = self.txtFirstName.text()
    #    self.lblError.setText("Error: Must fill in all fields")
    #    self.clear()





if __name__ == "__main__":
    currentApp = QApplication(sys.argv)
    currentForm = EntryApplication()

    currentForm.show()
    currentApp.exec_()
